/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.TouristRole;

import Project.SmartCity.SmartCity;
import Project.SmartCity.TourismRoles.TourGuide;
import Project.SmartCity.TourismRoles.TourGuideDirectory;
import Project.SmartCity.TourismRoles.Tourist;
import Project.SmartCity.TourismSystem.Aquarium;
import Project.SmartCity.TourismSystem.AquariumDirectory;
import Project.SmartCity.TourismSystem.Beach;
import Project.SmartCity.TourismSystem.BeachDirectory;
import Project.SmartCity.TourismSystem.Garden;
import Project.SmartCity.TourismSystem.GardenDirectory;
import Project.SmartCity.TourismSystem.Museum;
import Project.SmartCity.TourismSystem.MuseumDirectory;
import Project.UserAccount.UserAccount;
import UI.BusinessOwnerRole.BusinessOwnerViewBusinessesPanel;
import java.awt.Image;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;



/**
 *
 * @author harooniqbal
 */
public class TouristBookPackagePanel extends javax.swing.JPanel {

    /**
     * Creates new form TouristBookPackagePanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private SmartCity business;
    
    ArrayList<Object> places;
    String type = "";
    String picPath = "";
    String cost = "0";
    ArrayList<String> tourPlaces;
    
    Tourist tourist;
    TourGuide tourGuide;
    
    public TouristBookPackagePanel(JPanel userProcessContainer, UserAccount account, SmartCity business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.places = new ArrayList<>();
        this.tourPlaces = new ArrayList<>();
        for (Tourist c : business.getTouristDirectory().getTouristList()){
            if(c.getUsername().equals(userAccount.getUsername())){
                tourist = c;
                break;
            }
        }
        //Icon icon = new ImageIcon("/Users/harooniqbal/Desktop/AEDProjectImages.beach1.png");
        //jButtonbeach.setIcon(icon);
        populateTable2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonbeach = new javax.swing.JButton();
        jButtonmuseum = new javax.swing.JButton();
        jButtongarden = new javax.swing.JButton();
        jButtonaquarium = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableselectplaces = new javax.swing.JTable();
        jButtonaddplace = new javax.swing.JButton();
        jButtonremoveplace = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTabletourismplaces = new javax.swing.JTable();
        jButtonshowpic = new javax.swing.JButton();
        jButtonshowlocation = new javax.swing.JButton();
        jLabelpackagedate = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablecommuterviewservices1 = new javax.swing.JTable();
        jButtonbooktourpackage = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(194, 216, 220));

        jLabel9.setIcon(new javax.swing.ImageIcon("/Users/harooniqbal/Desktop/AEDProjectImages/tourismbackground1.png")); // NOI18N
        jLabel9.setText("jLabel9");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(25, 56, 82));
        jLabel4.setText("TOURIST BOOK PACKAGE");

        jButtonbeach.setIcon(new javax.swing.ImageIcon("/Users/harooniqbal/Desktop/AEDProjectImages/beach1.png")); // NOI18N
        jButtonbeach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonbeachActionPerformed(evt);
            }
        });

        jButtonmuseum.setIcon(new javax.swing.ImageIcon("/Users/harooniqbal/Desktop/AEDProjectImages/museum1.png")); // NOI18N
        jButtonmuseum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonmuseumActionPerformed(evt);
            }
        });

        jButtongarden.setIcon(new javax.swing.ImageIcon("/Users/harooniqbal/Desktop/AEDProjectImages/garden1.png")); // NOI18N
        jButtongarden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtongardenActionPerformed(evt);
            }
        });

        jButtonaquarium.setIcon(new javax.swing.ImageIcon("/Users/harooniqbal/Desktop/AEDProjectImages/aquarium1.png")); // NOI18N
        jButtonaquarium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonaquariumActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 51));
        jLabel7.setText("Select Tourist Places:");

        jTableselectplaces.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Location", "Cost"
            }
        ));
        jScrollPane3.setViewportView(jTableselectplaces);

        jButtonaddplace.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jButtonaddplace.setForeground(new java.awt.Color(0, 51, 51));
        jButtonaddplace.setText("+");
        jButtonaddplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonaddplaceActionPerformed(evt);
            }
        });

        jButtonremoveplace.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jButtonremoveplace.setForeground(new java.awt.Color(0, 51, 51));
        jButtonremoveplace.setText("-");
        jButtonremoveplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonremoveplaceActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 51, 51));
        jLabel8.setText("Add to Tour Package:");

        jTabletourismplaces.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Location", "Cost"
            }
        ));
        jScrollPane4.setViewportView(jTabletourismplaces);

        jButtonshowpic.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jButtonshowpic.setForeground(new java.awt.Color(0, 51, 51));
        jButtonshowpic.setText("Show Pictures");
        jButtonshowpic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonshowpicActionPerformed(evt);
            }
        });

        jButtonshowlocation.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jButtonshowlocation.setForeground(new java.awt.Color(0, 51, 51));
        jButtonshowlocation.setText("Show Location");
        jButtonshowlocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonshowlocationActionPerformed(evt);
            }
        });

        jLabelpackagedate.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        jLabelpackagedate.setForeground(new java.awt.Color(0, 51, 51));
        jLabelpackagedate.setText("Select Date of Package:");

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 51));
        jLabel1.setText("Select a Tour Guide:");

        jTablecommuterviewservices1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Name", "Experience"
            }
        ));
        jScrollPane2.setViewportView(jTablecommuterviewservices1);

        jButtonbooktourpackage.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jButtonbooktourpackage.setForeground(new java.awt.Color(0, 51, 51));
        jButtonbooktourpackage.setText("Book Tour Package");
        jButtonbooktourpackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonbooktourpackageActionPerformed(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon("/Users/harooniqbal/Desktop/AEDProjectImages/tourismicon-removebg-preview (1).png")); // NOI18N
        jLabel10.setText("jLabel10");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(257, 257, 257)
                                .addComponent(jButtonbooktourpackage))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelpackagedate)
                                .addGap(18, 18, 18)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(jButtonshowlocation)
                                .addGap(57, 57, 57)
                                .addComponent(jButtonshowpic))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButtonmuseum, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButtonaddplace)
                                            .addComponent(jButtonremoveplace))
                                        .addGap(58, 58, 58)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addComponent(jButtongarden, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(48, 48, 48)
                                        .addComponent(jButtonaquarium, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jButtonbeach, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(451, 451, 451)
                    .addComponent(jLabel4)
                    .addContainerGap(509, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtongarden, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonaquarium, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonmuseum, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonbeach, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addComponent(jButtonaddplace)
                                .addGap(26, 26, 26)
                                .addComponent(jButtonremoveplace))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonshowlocation)
                    .addComponent(jButtonshowpic))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelpackagedate)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(27, 27, 27)
                        .addComponent(jButtonbooktourpackage)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel4)
                    .addContainerGap(896, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonbeachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonbeachActionPerformed
        // TODO add your handling code here:
        type = "Beach";
        populateTable();
        JOptionPane.showMessageDialog(this, "Beach Option Selected");
    }//GEN-LAST:event_jButtonbeachActionPerformed

    private void jButtonmuseumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonmuseumActionPerformed
        // TODO add your handling code here:
        type = "Museum";
        populateTable();
        JOptionPane.showMessageDialog(this, "Museum Option Selected");
    }//GEN-LAST:event_jButtonmuseumActionPerformed

    private void jButtongardenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtongardenActionPerformed
        // TODO add your handling code here:
        type = "Garden";
        populateTable();
         JOptionPane.showMessageDialog(this, "Garden Option Selected");
    }//GEN-LAST:event_jButtongardenActionPerformed

    private void jButtonaquariumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonaquariumActionPerformed
        // TODO add your handling code here:
        type = "Aquarium";
        populateTable();
         JOptionPane.showMessageDialog(this, "Aquarium Option Selected");
    }//GEN-LAST:event_jButtonaquariumActionPerformed

    private void jButtonaddplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonaddplaceActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTableselectplaces.getSelectedRow();

        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to be added.");
            return;
        }

        DefaultTableModel records = (DefaultTableModel) jTableselectplaces.getModel();
        Integer id = (Integer) records.getValueAt(selectedRowIndex, 0);

        switch(type){
            case "Beach":
            Beach beach = business.getBeachDirectory().getBeach(id);
            cost = Integer.toString(Integer.parseInt(cost) + Integer.parseInt(beach.getCost()));
            tourPlaces.add(beach.getName());
            places.add(beach);
            break;
            case "Museum":
            Museum museum = business.getMuseumDirectory().getMuseum(id);
            cost = Integer.toString(Integer.parseInt(cost) + Integer.parseInt(museum.getCost()));
            tourPlaces.add(museum.getName());
            places.add(museum);
            break;
            case "Garden":
            Garden garden = business.getGardenDirectory().getGarden(id);
            cost = Integer.toString(Integer.parseInt(cost) + Integer.parseInt(garden.getCost()));
            tourPlaces.add(garden.getName());
            places.add(garden);
            break;
            case "Aquarium":
            Aquarium aquarium = business.getAquariumDirectory().getAquarium(id);
            cost = Integer.toString(Integer.parseInt(cost) + Integer.parseInt(aquarium.getCost()));
            tourPlaces.add(aquarium.getName());
            places.add(aquarium);
            break;
            default:
            JOptionPane.showMessageDialog(this, "Please select either a beach, museum, garden or an aquarium.");
            return;
        }
        populateTable3();
    }//GEN-LAST:event_jButtonaddplaceActionPerformed

    private void jButtonremoveplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonremoveplaceActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTabletourismplaces.getSelectedRow();

        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to be deleted.");
            return;
        }

        DefaultTableModel records = (DefaultTableModel) jTabletourismplaces.getModel();
        Integer id = (Integer) records.getValueAt(selectedRowIndex, 0);

        String type2;

        if(business.getBeachDirectory().getBeach(id) != null) type2="Beach";
        else if(business.getGardenDirectory().getGarden(id) != null) type2="Garden";
        else if(business.getMuseumDirectory().getMuseum(id) != null) type2="Museum";
        else type2="Aquarium";

        switch(type2){
            case "Beach":
            Beach beach = business.getBeachDirectory().getBeach(id);
            cost = Integer.toString(Integer.parseInt(cost) - Integer.parseInt(beach.getCost()));
            tourPlaces.remove(beach.getName());
            places.remove(beach);
            break;
            case "Museum":
            Museum museum = business.getMuseumDirectory().getMuseum(id);
            cost = Integer.toString(Integer.parseInt(cost) - Integer.parseInt(museum.getCost()));
            tourPlaces.remove(museum.getName());
            places.remove(museum);
            break;
            case "Garden":
            Garden garden = business.getGardenDirectory().getGarden(id);
            cost = Integer.toString(Integer.parseInt(cost) - Integer.parseInt(garden.getCost()));
            tourPlaces.remove(garden.getName());
            places.remove(garden);
            break;
            case "Aquarium":
            Aquarium aquarium = business.getAquariumDirectory().getAquarium(id);
            cost = Integer.toString(Integer.parseInt(cost) - Integer.parseInt(aquarium.getCost()));
            tourPlaces.remove(aquarium.getName());
            places.remove(aquarium);
            break;
            default:
            JOptionPane.showMessageDialog(this, "Please select a row to be removed.");
            return;
        }
        populateTable3();
    }//GEN-LAST:event_jButtonremoveplaceActionPerformed

    private void jButtonshowpicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonshowpicActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTableselectplaces.getSelectedRow();
        
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to be added.");
            return;
        }
        
        DefaultTableModel records = (DefaultTableModel) jTableselectplaces.getModel();
        Integer id = (Integer) records.getValueAt(selectedRowIndex, 0);
        
        switch(type){
            case "Beach":
                Beach beach = business.getBeachDirectory().getBeach(id);
                picPath = beach.getpicPath();
                System.out.println("Entered1"+picPath);
                break;
            case "Museum":
                Museum museum = business.getMuseumDirectory().getMuseum(id);
                picPath = museum.getpicPath();
                break;
            case "Garden":
                Garden garden = business.getGardenDirectory().getGarden(id);
                picPath = garden.getpicPath();
                break;
            case "Aquarium":
                Aquarium aquarium = business.getAquariumDirectory().getAquarium(id);
                picPath = aquarium.getpicPath();
                break;
            default:
                JOptionPane.showMessageDialog(this, "Please select either a beach, museum, garden or an aquarium.");
                //return;
            
        }    
            System.out.println("Entered2"+picPath);
            JFrame f = new JFrame();
        //f.setUndecorated(true);
            ImageIcon image = new ImageIcon(picPath);
            JLabel lbl = new JLabel(image);
            f.getContentPane().add(lbl);
            f.setSize(1200/2, 800/2);
            f.setLocation(659, 338);
            f.setVisible(true);
    }//GEN-LAST:event_jButtonshowpicActionPerformed

    private void jButtonshowlocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonshowlocationActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = jTableselectplaces.getSelectedRow();
        
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to be shown.");
            return;
        }
        
        DefaultTableModel records = (DefaultTableModel) jTableselectplaces.getModel();
        Integer id = (Integer) records.getValueAt(selectedRowIndex, 0);
        
        switch(type){
            case "Beach":
                Beach beach = business.getBeachDirectory().getBeach(id);
                
                Image image1 = null;
                URL url=null;
                try {
                    url = new URL("https://maps.googleapis.com/maps/api/staticmap?center="+beach.location[0]+","+beach.location[1]+"&zoom=10&size=400x400&markers=color:yellow%7Clabel:B%7C"+beach.location[0]+","+beach.location[1]+"&key=AIzaSyBBMO7Tcty1cgtbP3zw7VZpv8juNlq_dLo");
                    image1 = ImageIO.read(url);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(BusinessOwnerViewBusinessesPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(BusinessOwnerViewBusinessesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                JFrame f = new JFrame();
            //f.setUndecorated(true);
                ImageIcon image = new ImageIcon(image1);
                JLabel lbl = new JLabel(image);
                f.getContentPane().add(lbl);
                f.setSize(1200/2, 800/2);
                f.setLocation(659, 338);
                f.setVisible(true);
                break;
            case "Museum":
                Museum museum = business.getMuseumDirectory().getMuseum(id);
                Image image11 = null;
                URL url1=null;
                try {
                    url1 = new URL("https://maps.googleapis.com/maps/api/staticmap?center="+museum.location[0]+","+museum.location[1]+"&zoom=10&size=400x400&markers=color:white%7Clabel:M%7C"+museum.location[0]+","+museum.location[1]+"&key=AIzaSyBBMO7Tcty1cgtbP3zw7VZpv8juNlq_dLo");
                    image11 = ImageIO.read(url1);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(BusinessOwnerViewBusinessesPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(BusinessOwnerViewBusinessesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                JFrame f1 = new JFrame();
            //f.setUndecorated(true);
                ImageIcon image2 = new ImageIcon(image11);
                JLabel lbl1 = new JLabel(image2);
                f1.getContentPane().add(lbl1);
                f1.setSize(1200/2, 800/2);
                f1.setLocation(659, 338);
                f1.setVisible(true);
                break;
            case "Garden":
                Garden garden = business.getGardenDirectory().getGarden(id);
                Image image3 = null;
                URL url3=null;
                try {
                    url3 = new URL("https://maps.googleapis.com/maps/api/staticmap?center="+garden.location[0]+","+garden.location[1]+"&zoom=10&size=400x400&markers=color:green%7Clabel:G%7C"+garden.location[0]+","+garden.location[1]+"&key=AIzaSyBBMO7Tcty1cgtbP3zw7VZpv8juNlq_dLo");
                    image3 = ImageIO.read(url3);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(BusinessOwnerViewBusinessesPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(BusinessOwnerViewBusinessesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                JFrame f3 = new JFrame();
            //f.setUndecorated(true);
                ImageIcon image33 = new ImageIcon(image3);
                JLabel lbl3 = new JLabel(image33);
                f3.getContentPane().add(lbl3);
                f3.setSize(1200/2, 800/2);
                f3.setLocation(659, 338);
                f3.setVisible(true);
                break;
            case "Aquarium":
                Aquarium aquarium = business.getAquariumDirectory().getAquarium(id);
                Image image4 = null;
                URL url4=null;
                try {
                    url4 = new URL("https://maps.googleapis.com/maps/api/staticmap?center="+aquarium.location[0]+","+aquarium.location[1]+"&zoom=10&size=400x400&markers=color:blue%7Clabel:B%7C"+aquarium.location[0]+","+aquarium.location[1]+"&key=AIzaSyBBMO7Tcty1cgtbP3zw7VZpv8juNlq_dLo");
                    image4 = ImageIO.read(url4);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(BusinessOwnerViewBusinessesPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(BusinessOwnerViewBusinessesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                JFrame f4 = new JFrame();
            //f.setUndecorated(true);
                ImageIcon image44 = new ImageIcon(image4);
                JLabel lbl4 = new JLabel(image44);
                f4.getContentPane().add(lbl4);
                f4.setSize(1200/2, 800/2);
                f4.setLocation(659, 338);
                f4.setVisible(true);
                break;
            default:
                JOptionPane.showMessageDialog(this, "Please select either a beach, museum, garden or an aquarium.");
                return;
        }
        
    }//GEN-LAST:event_jButtonshowlocationActionPerformed

    private void jButtonbooktourpackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonbooktourpackageActionPerformed
        // TODO add your handling code here:
        Date d = jDateChooser1.getDate();
        DateFormat dateFormat = new SimpleDateFormat("MMM d, yyyy");
        String date = dateFormat.format(d);

        int selectedRowIndex = jTablecommuterviewservices1.getSelectedRow();

        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a tour guide.");
            return;
        }

        DefaultTableModel records = (DefaultTableModel) jTablecommuterviewservices1.getModel();
        Integer id = (Integer) records.getValueAt(selectedRowIndex, 0);

        tourGuide = business.getTourGuideDirectory().getTourGuide(id);

        tourGuide.getTourPackageDirectory().createTourPackage(cost, tourPlaces, date);
        tourist.getTourPackageDirectory().createTourPackage(cost, tourPlaces, date);
         JOptionPane.showMessageDialog(this, "Tour Package Booked");
    }//GEN-LAST:event_jButtonbooktourpackageActionPerformed

    private void populateTable2() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        DefaultTableModel records = (DefaultTableModel) jTablecommuterviewservices1.getModel();
        
        TourGuideDirectory tourGuideDirectory = business.getTourGuideDirectory();
        records.setRowCount(0); //Clear empty records

        for(TourGuide o : tourGuideDirectory.getTourGuideList()){
            Object[] row = new Object[3];
            row[0] = o.getId();
            //row[0] = vs.getDate();
            row[1] = o.getName();
            row[2] = o.getExperience();
            
            records.addRow(row);
        }
    }

    private void populateTable3() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel records = (DefaultTableModel) jTabletourismplaces.getModel();
        records.setRowCount(0); //Clear empty records

        for(Object o : places){
            Object[] row = new Object[4];
            switch(o.getClass().getSimpleName()){
                case "Beach":
                    BeachDirectory beachDirectory = business.getBeachDirectory();
                    Beach b = (Beach)o;
                        row[0] = b.getId();
                        //row[0] = vs.getDate();
                        row[1] = b.getName();
                        row[2] = b.getLocation()[0]+"/"+b.getLocation()[1];
                        row[3] = b.getCost();
                    break;
                case "Museum":
                    MuseumDirectory museumDirectory = business.getMuseumDirectory();
                    Museum m = (Museum)o;
                        row[0] = m.getId();
                        //row[0] = vs.getDate();
                        row[1] = m.getName();
                        row[2] = m.getLocation()[0]+"/"+m.getLocation()[1];
                        row[3] = m.getCost();
                    break;
                case "Garden":
                    GardenDirectory gardenDirectory = business.getGardenDirectory();
                    Garden g = (Garden)o;
                        row[0] = g.getId();
                        //row[0] = vs.getDate();
                        row[1] = g.getName();
                        row[2] = g.getLocation()[0]+"/"+g.getLocation()[1];
                        row[3] = g.getCost();
                    break;
                case "Aquarium":
                    AquariumDirectory aquariumDirectory = business.getAquariumDirectory();
                    Aquarium a = (Aquarium)o;
                        row[0] = a.getId();
                        //row[0] = vs.getDate();
                        row[1] = a.getName();
                        row[2] = a.getLocation()[0]+"/"+a.getLocation()[1];
                        row[3] = a.getCost();
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Please select either a beach, museum, garden or an aquarium.");
                    return;
            }
            records.addRow(row);
        }
    }
    
    private void populateTable() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        DefaultTableModel records = (DefaultTableModel) jTableselectplaces.getModel();
        
        switch(type){
            case "Beach":
                BeachDirectory beachDirectory = business.getBeachDirectory();
                records.setRowCount(0); //Clear empty records

                for(Beach o : beachDirectory.getBeachList()){
                        Object[] row = new Object[4];
                        row[0] = o.getId();
                        //row[0] = vs.getDate();
                        row[1] = o.getName();
                        row[2] = o.getLocation()[0]+"/"+o.getLocation()[1];
                        row[3] = o.getCost();

                        records.addRow(row);
                }
                break;
            case "Museum":
                MuseumDirectory museumDirectory = business.getMuseumDirectory();
                records.setRowCount(0); //Clear empty records

                for(Museum o : museumDirectory.getMuseumList()){
                        Object[] row = new Object[4];
                        row[0] = o.getId();
                        //row[0] = vs.getDate();
                        row[1] = o.getName();
                        row[2] = o.getLocation()[0]+"/"+o.getLocation()[1];
                        row[3] = o.getCost();

                        records.addRow(row);
                }
                break;
            case "Garden":
                GardenDirectory gardenDirectory = business.getGardenDirectory();
                records.setRowCount(0); //Clear empty records

                for(Garden o : gardenDirectory.getGardenList()){
                        Object[] row = new Object[4];
                        row[0] = o.getId();
                        //row[0] = vs.getDate();
                        row[1] = o.getName();
                        row[2] = o.getLocation()[0]+"/"+o.getLocation()[1];
                        row[3] = o.getCost();

                        records.addRow(row);
                }
                break;
            case "Aquarium":
                AquariumDirectory aquariumDirectory = business.getAquariumDirectory();
                records.setRowCount(0); //Clear empty records

                for(Aquarium o : aquariumDirectory.getAquariumList()){
                        Object[] row = new Object[4];
                        row[0] = o.getId();
                        //row[0] = vs.getDate();
                        row[1] = o.getName();
                        row[2] = o.getLocation()[0]+"/"+o.getLocation()[1];
                        row[3] = o.getCost();

                        records.addRow(row);
                }
                break;
            default:
                JOptionPane.showMessageDialog(this, "Please select either a beach, museum, garden or an aquarium.");
                return;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonaddplace;
    private javax.swing.JButton jButtonaquarium;
    private javax.swing.JButton jButtonbeach;
    private javax.swing.JButton jButtonbooktourpackage;
    private javax.swing.JButton jButtongarden;
    private javax.swing.JButton jButtonmuseum;
    private javax.swing.JButton jButtonremoveplace;
    private javax.swing.JButton jButtonshowlocation;
    private javax.swing.JButton jButtonshowpic;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelpackagedate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTablecommuterviewservices1;
    private javax.swing.JTable jTableselectplaces;
    private javax.swing.JTable jTabletourismplaces;
    // End of variables declaration//GEN-END:variables
}
