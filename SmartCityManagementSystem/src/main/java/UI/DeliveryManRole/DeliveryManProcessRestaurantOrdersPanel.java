/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.DeliveryManRole;

import Project.SmartCity.SmartCity;
import Project.UserAccount.UserAccount;
import javax.swing.JPanel;

/**
 *
 * @author harooniqbal
 */
public class DeliveryManProcessRestaurantOrdersPanel extends javax.swing.JPanel {

    /**
     * Creates new form DeliveryManProcessRestaurantOrdersPanel
     */
    private JPanel userProcessContainer;

    private UserAccount userAccount;
    
    private SmartCity business;
    public DeliveryManProcessRestaurantOrdersPanel(JPanel userProcessContainer, SmartCity business, UserAccount account) {
        initComponents();
        this.business = business;
        this.userAccount = account;
        this.userProcessContainer = userProcessContainer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        orderlisttbl = new javax.swing.JTable();
        processDeliverybtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordercontentstbl = new javax.swing.JTable();
        assigntomebtn = new javax.swing.JButton();
        deliverbtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderhistorytbl = new javax.swing.JTable();

        orderlisttbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Order ID", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(orderlisttbl);

        processDeliverybtn.setText("Go to");
        processDeliverybtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processDeliverybtnActionPerformed(evt);
            }
        });

        ordercontentstbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Menu Items"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ordercontentstbl);

        assigntomebtn.setText("Assign to Me");
        assigntomebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assigntomebtnActionPerformed(evt);
            }
        });

        deliverbtn.setText("Mark As Completed");
        deliverbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliverbtnActionPerformed(evt);
            }
        });

        orderhistorytbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Order ID", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderhistorytbl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(processDeliverybtn)
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(assigntomebtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(365, 365, 365)
                        .addComponent(deliverbtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(processDeliverybtn)
                        .addGap(122, 122, 122))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(172, 172, 172)
                                .addComponent(assigntomebtn)))
                        .addGap(73, 73, 73)))
                .addComponent(deliverbtn)
                .addGap(107, 107, 107)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(100, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void processDeliverybtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processDeliverybtnActionPerformed
        /*int selectedRowIndex = orderlisttbl.getSelectedRow();

        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to be viewed.");
            return;
        }

        DefaultTableModel records = (DefaultTableModel) orderlisttbl.getModel();
        Integer id = (Integer) records.getValueAt(selectedRowIndex, 0);
        Order order = business.getOrderDirectory().getOrder(id);

        populateTable2(order);*/
    }//GEN-LAST:event_processDeliverybtnActionPerformed

    private void assigntomebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assigntomebtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_assigntomebtnActionPerformed

    private void deliverbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliverbtnActionPerformed
        // TODO add your handling code here:
        /* int selectedRowIndex = orderlisttbl.getSelectedRow();

        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to be marked.");
            return;
        }
        DefaultTableModel records = (DefaultTableModel) orderlisttbl.getModel();
        Integer id = (Integer) records.getValueAt(selectedRowIndex, 0);
        Order order = business.getOrderDirectory().getOrder(id);

        //        Order order = (Order) records.getValueAt(selectedRowIndex, 0);

        OrderDirectory orderDirectory;

        if(userAccount.getUsername().equals("delivery")){
            orderDirectory = business.getDeliveryManDirectory().getDeliverManList().get(0).getOrderDirectory();

        }
        else if(userAccount.getUsername().equals("delivery2")){
            orderDirectory = business.getDeliveryManDirectory().getDeliverManList().get(1).getOrderDirectory();
        }
        else{
            orderDirectory = business.getDeliveryManDirectory().getDeliverManList().get(2).getOrderDirectory();
        }

        Order o = orderDirectory.getOrder(id);
        if(o == null){
            JOptionPane.showMessageDialog(this, "Order not found.");
            return;
        }

        o.setStatus("Completed");
        order.setStatus("Completed");

        //        business.getDeliveryManDirectory().getDeliverManList().get(0).setOrderDirectory(orderDirectory);

        records.setRowCount(0); //Clear empty records

        for(Order or : orderDirectory.getOrderList()){
            //            if(o.getStatus().equals("Completed")){
                Object[] row = new Object[2];
                row[0] = or.getId();
                //row[0] = vs.getDate();
                row[1] = or.getStatus();

                records.addRow(row);
                //            }
        }
        populateTable();
        populateTable3();*/
    }//GEN-LAST:event_deliverbtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assigntomebtn;
    private javax.swing.JButton deliverbtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable ordercontentstbl;
    private javax.swing.JTable orderhistorytbl;
    private javax.swing.JTable orderlisttbl;
    private javax.swing.JButton processDeliverybtn;
    // End of variables declaration//GEN-END:variables
}
